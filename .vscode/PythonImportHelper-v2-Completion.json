[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "check_api_key",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_api_key():\n    \"\"\"\n    Si se define API_KEY, las peticiones deben incluir el encabezado\n    X-API-KEY con el valor correcto. De lo contrario se devuelve 401.\n    \"\"\"\n    if API_KEY:\n        key = request.headers.get('X-API-KEY')\n        if key != API_KEY:\n            abort(401)\n@app.route('/')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "status",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def status():\n    return jsonify({\"status\": \"OK\"})\n@app.route('/reboot', methods=['POST'])\ndef reboot():\n    subprocess.Popen([\"/sbin/reboot\"])\n    return jsonify({\"action\": \"rebooting\"})\n@app.route('/shutdown', methods=['POST'])\ndef shutdown():\n    subprocess.Popen([\"/sbin/shutdown\", \"now\"])\n    return jsonify({\"action\": \"shutting down\"})",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "reboot",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def reboot():\n    subprocess.Popen([\"/sbin/reboot\"])\n    return jsonify({\"action\": \"rebooting\"})\n@app.route('/shutdown', methods=['POST'])\ndef shutdown():\n    subprocess.Popen([\"/sbin/shutdown\", \"now\"])\n    return jsonify({\"action\": \"shutting down\"})\n@app.route('/program/<name>', methods=['POST'])\ndef start_program(name):\n    cmd = ALLOWED_PROGRAMS.get(name)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "shutdown",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def shutdown():\n    subprocess.Popen([\"/sbin/shutdown\", \"now\"])\n    return jsonify({\"action\": \"shutting down\"})\n@app.route('/program/<name>', methods=['POST'])\ndef start_program(name):\n    cmd = ALLOWED_PROGRAMS.get(name)\n    if not cmd:\n        abort(404)\n    # Establece DISPLAY para que la aplicaci칩n gr치fica se abra en la pantalla\n    env = dict(os.environ)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "start_program",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def start_program(name):\n    cmd = ALLOWED_PROGRAMS.get(name)\n    if not cmd:\n        abort(404)\n    # Establece DISPLAY para que la aplicaci칩n gr치fica se abra en la pantalla\n    env = dict(os.environ)\n    env['DISPLAY'] = env.get('DISPLAY', ':0')\n    subprocess.Popen(cmd, env=env)\n    return jsonify({\"action\": f\"starting {name}\"})\nif __name__ == '__main__':",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\nAPI_KEY = os.environ.get(\"RASP_CONTROL_API_KEY\")\nCURRENT_URL = None\nALLOWED_PROGRAMS = {\n    'blueman': ['blueman-manager'],\n    # 'otro_programa': ['comando']\n}\ndef check_api_key():\n    \"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "API_KEY = os.environ.get(\"RASP_CONTROL_API_KEY\")\nCURRENT_URL = None\nALLOWED_PROGRAMS = {\n    'blueman': ['blueman-manager'],\n    # 'otro_programa': ['comando']\n}\ndef check_api_key():\n    \"\"\"\n    Si se define API_KEY, las peticiones deben incluir el encabezado\n    X-API-KEY con el valor correcto. De lo contrario se devuelve 401.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "CURRENT_URL",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "CURRENT_URL = None\nALLOWED_PROGRAMS = {\n    'blueman': ['blueman-manager'],\n    # 'otro_programa': ['comando']\n}\ndef check_api_key():\n    \"\"\"\n    Si se define API_KEY, las peticiones deben incluir el encabezado\n    X-API-KEY con el valor correcto. De lo contrario se devuelve 401.\n    \"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ALLOWED_PROGRAMS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ALLOWED_PROGRAMS = {\n    'blueman': ['blueman-manager'],\n    # 'otro_programa': ['comando']\n}\ndef check_api_key():\n    \"\"\"\n    Si se define API_KEY, las peticiones deben incluir el encabezado\n    X-API-KEY con el valor correcto. De lo contrario se devuelve 401.\n    \"\"\"\n    if API_KEY:",
        "detail": "main",
        "documentation": {}
    }
]